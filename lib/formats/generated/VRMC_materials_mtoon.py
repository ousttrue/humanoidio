# this is generated by sukonbu
from typing import NamedTuple, List, Any, Optional, Dict
from enum import Enum

def is_enable(value):
    if isinstance(value, int):
        return True
    if value:
        return True
    return False


class VRMC_materials_mtoon(NamedTuple):
    # Meta
    version: Optional[str] = None
    # enable depth buffer when renderMode is transparent
    transparentWithZWrite: Optional[bool] = None
    # 
    renderQueueOffsetNumber: Optional[int] = None
    # 
    shadeFactor: Optional[List[float]] = None
    # 
    shadeMultiplyTexture: Optional[int] = None
    # Lighting
    shadingShiftFactor: Optional[float] = None
    # 
    shadingToonyFactor: Optional[float] = None
    # 
    lightColorAttenuationFactor: Optional[float] = None
    # 
    giIntensityFactor: Optional[float] = None
    # MatCap
    additiveTexture: Optional[int] = None
    # Rim
    rimFactor: Optional[List[float]] = None
    # 
    rimMultiplyTexture: Optional[int] = None
    # 
    rimLightingMixFactor: Optional[float] = None
    # 
    rimFresnelPowerFactor: Optional[float] = None
    # 
    rimLiftFactor: Optional[float] = None
    # Outline
    outlineWidthMode: Optional[str] = None
    # 
    outlineWidthFactor: Optional[float] = None
    # 
    outlineWidthMultiplyTexture: Optional[int] = None
    # 
    outlineScaledMaxDistanceFactor: Optional[float] = None
    # 
    outlineColorMode: Optional[str] = None
    # 
    outlineFactor: Optional[List[float]] = None
    # 
    outlineLightingMixFactor: Optional[float] = None
    # 
    uvAnimationMaskTexture: Optional[int] = None
    # 
    uvAnimationScrollXSpeedFactor: Optional[float] = None
    # 
    uvAnimationScrollYSpeedFactor: Optional[float] = None
    # 
    uvAnimationRotationSpeedFactor: Optional[float] = None

    def to_dict(self) -> Dict[str, Any]:
        d: Dict[str, Any] = {}
        if is_enable(self.version): d["version"] = self.version # noqa
        if is_enable(self.transparentWithZWrite): d["transparentWithZWrite"] = self.transparentWithZWrite # noqa
        if is_enable(self.renderQueueOffsetNumber): d["renderQueueOffsetNumber"] = self.renderQueueOffsetNumber # noqa
        if self.shadeFactor: d["shadeFactor"] = self.shadeFactor # noqa
        if is_enable(self.shadeMultiplyTexture): d["shadeMultiplyTexture"] = self.shadeMultiplyTexture # noqa
        if is_enable(self.shadingShiftFactor): d["shadingShiftFactor"] = self.shadingShiftFactor # noqa
        if is_enable(self.shadingToonyFactor): d["shadingToonyFactor"] = self.shadingToonyFactor # noqa
        if is_enable(self.lightColorAttenuationFactor): d["lightColorAttenuationFactor"] = self.lightColorAttenuationFactor # noqa
        if is_enable(self.giIntensityFactor): d["giIntensityFactor"] = self.giIntensityFactor # noqa
        if is_enable(self.additiveTexture): d["additiveTexture"] = self.additiveTexture # noqa
        if self.rimFactor: d["rimFactor"] = self.rimFactor # noqa
        if is_enable(self.rimMultiplyTexture): d["rimMultiplyTexture"] = self.rimMultiplyTexture # noqa
        if is_enable(self.rimLightingMixFactor): d["rimLightingMixFactor"] = self.rimLightingMixFactor # noqa
        if is_enable(self.rimFresnelPowerFactor): d["rimFresnelPowerFactor"] = self.rimFresnelPowerFactor # noqa
        if is_enable(self.rimLiftFactor): d["rimLiftFactor"] = self.rimLiftFactor # noqa
        if is_enable(self.outlineWidthMode): d["outlineWidthMode"] = self.outlineWidthMode # noqa
        if is_enable(self.outlineWidthFactor): d["outlineWidthFactor"] = self.outlineWidthFactor # noqa
        if is_enable(self.outlineWidthMultiplyTexture): d["outlineWidthMultiplyTexture"] = self.outlineWidthMultiplyTexture # noqa
        if is_enable(self.outlineScaledMaxDistanceFactor): d["outlineScaledMaxDistanceFactor"] = self.outlineScaledMaxDistanceFactor # noqa
        if is_enable(self.outlineColorMode): d["outlineColorMode"] = self.outlineColorMode # noqa
        if self.outlineFactor: d["outlineFactor"] = self.outlineFactor # noqa
        if is_enable(self.outlineLightingMixFactor): d["outlineLightingMixFactor"] = self.outlineLightingMixFactor # noqa
        if is_enable(self.uvAnimationMaskTexture): d["uvAnimationMaskTexture"] = self.uvAnimationMaskTexture # noqa
        if is_enable(self.uvAnimationScrollXSpeedFactor): d["uvAnimationScrollXSpeedFactor"] = self.uvAnimationScrollXSpeedFactor # noqa
        if is_enable(self.uvAnimationScrollYSpeedFactor): d["uvAnimationScrollYSpeedFactor"] = self.uvAnimationScrollYSpeedFactor # noqa
        if is_enable(self.uvAnimationRotationSpeedFactor): d["uvAnimationRotationSpeedFactor"] = self.uvAnimationRotationSpeedFactor # noqa
        return d

    @staticmethod
    def from_dict(src: dict) -> 'VRMC_materials_mtoon':
        dst = {}
        if "version" in src: dst["version"] = src["version"] # noqa copy
        if "transparentWithZWrite" in src: dst["transparentWithZWrite"] = src["transparentWithZWrite"] # noqa copy
        if "renderQueueOffsetNumber" in src: dst["renderQueueOffsetNumber"] = src["renderQueueOffsetNumber"] # noqa copy
        dst["shadeFactor"] = src.get("shadeFactor", [])
        if "shadeMultiplyTexture" in src: dst["shadeMultiplyTexture"] = src["shadeMultiplyTexture"] # noqa copy
        if "shadingShiftFactor" in src: dst["shadingShiftFactor"] = src["shadingShiftFactor"] # noqa copy
        if "shadingToonyFactor" in src: dst["shadingToonyFactor"] = src["shadingToonyFactor"] # noqa copy
        if "lightColorAttenuationFactor" in src: dst["lightColorAttenuationFactor"] = src["lightColorAttenuationFactor"] # noqa copy
        if "giIntensityFactor" in src: dst["giIntensityFactor"] = src["giIntensityFactor"] # noqa copy
        if "additiveTexture" in src: dst["additiveTexture"] = src["additiveTexture"] # noqa copy
        dst["rimFactor"] = src.get("rimFactor", [])
        if "rimMultiplyTexture" in src: dst["rimMultiplyTexture"] = src["rimMultiplyTexture"] # noqa copy
        if "rimLightingMixFactor" in src: dst["rimLightingMixFactor"] = src["rimLightingMixFactor"] # noqa copy
        if "rimFresnelPowerFactor" in src: dst["rimFresnelPowerFactor"] = src["rimFresnelPowerFactor"] # noqa copy
        if "rimLiftFactor" in src: dst["rimLiftFactor"] = src["rimLiftFactor"] # noqa copy
        if "outlineWidthMode" in src: dst["outlineWidthMode"] = src["outlineWidthMode"] # noqa copy
        if "outlineWidthFactor" in src: dst["outlineWidthFactor"] = src["outlineWidthFactor"] # noqa copy
        if "outlineWidthMultiplyTexture" in src: dst["outlineWidthMultiplyTexture"] = src["outlineWidthMultiplyTexture"] # noqa copy
        if "outlineScaledMaxDistanceFactor" in src: dst["outlineScaledMaxDistanceFactor"] = src["outlineScaledMaxDistanceFactor"] # noqa copy
        if "outlineColorMode" in src: dst["outlineColorMode"] = src["outlineColorMode"] # noqa copy
        dst["outlineFactor"] = src.get("outlineFactor", [])
        if "outlineLightingMixFactor" in src: dst["outlineLightingMixFactor"] = src["outlineLightingMixFactor"] # noqa copy
        if "uvAnimationMaskTexture" in src: dst["uvAnimationMaskTexture"] = src["uvAnimationMaskTexture"] # noqa copy
        if "uvAnimationScrollXSpeedFactor" in src: dst["uvAnimationScrollXSpeedFactor"] = src["uvAnimationScrollXSpeedFactor"] # noqa copy
        if "uvAnimationScrollYSpeedFactor" in src: dst["uvAnimationScrollYSpeedFactor"] = src["uvAnimationScrollYSpeedFactor"] # noqa copy
        if "uvAnimationRotationSpeedFactor" in src: dst["uvAnimationRotationSpeedFactor"] = src["uvAnimationRotationSpeedFactor"] # noqa copy
        return VRMC_materials_mtoon(**dst)


if __name__ == '__main__':
    pass
