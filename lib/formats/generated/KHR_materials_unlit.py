# this is generated by sukonbu
from typing import NamedTuple, List, Any, Optional, Dict
from enum import Enum

def is_enable(value):
    if isinstance(value, int):
        return True
    if value:
        return True
    return False


class KHR_materials_unlitGlTFExtension(NamedTuple):
    # Dictionary object with extension-specific objects.
    extensions: Optional[Dict[str, Dict[str, Any]]] = None
    # Application-specific data.
    extras: Optional[Dict[str, Any]] = None

    def to_dict(self) -> Dict[str, Any]:
        d: Dict[str, Any] = {}
        if is_enable(self.extensions): d["extensions"] = self.extensions # noqa
        if is_enable(self.extras): d["extras"] = self.extras # noqa
        return d

    @staticmethod
    def from_dict(src: dict) -> 'KHR_materials_unlitGlTFExtension':
        dst = {}
        dst["extensions"] = src.get("extensions", {})
        dst["extras"] = src.get("extras", {})
        return KHR_materials_unlitGlTFExtension(**dst)


if __name__ == '__main__':
    pass
