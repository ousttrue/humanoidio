# this is generated by sukonbu
from typing import NamedTuple, List, Any, Optional, Dict
from enum import Enum

def is_enable(value):
    if isinstance(value, int):
        return True
    if value:
        return True
    return False


class SpringSetting(NamedTuple):
    # The force to return to the initial pose
    stiffness: float
    # Gravitational acceleration
    gravityPower: float
    # Air resistance. Deceleration force
    dragForce: float
    # The direction of gravity. A gravity other than downward direction also works.
    gravityDir: Optional[List[float]] = None
    # Dictionary object with extension-specific objects.
    extensions: Optional[Dict[str, Dict[str, Any]]] = None
    # Application-specific data.
    extras: Optional[Dict[str, Any]] = None

    def to_dict(self) -> Dict[str, Any]:
        d: Dict[str, Any] = {}
        if is_enable(self.stiffness): d["stiffness"] = self.stiffness # noqa
        if is_enable(self.gravityPower): d["gravityPower"] = self.gravityPower # noqa
        if self.gravityDir: d["gravityDir"] = self.gravityDir # noqa
        if is_enable(self.dragForce): d["dragForce"] = self.dragForce # noqa
        if is_enable(self.extensions): d["extensions"] = self.extensions # noqa
        if is_enable(self.extras): d["extras"] = self.extras # noqa
        return d

    @staticmethod
    def from_dict(src: dict) -> 'SpringSetting':
        dst = {}
        if "stiffness" in src: dst["stiffness"] = src["stiffness"] # noqa copy
        if "gravityPower" in src: dst["gravityPower"] = src["gravityPower"] # noqa copy
        dst["gravityDir"] = src.get("gravityDir", [])
        if "dragForce" in src: dst["dragForce"] = src["dragForce"] # noqa copy
        dst["extensions"] = src.get("extensions", {})
        dst["extras"] = src.get("extras", {})
        return SpringSetting(**dst)


class Spring(NamedTuple):
    # The index of spring settings
    setting: int
    # The node index of spring root
    springRoot: int
    # The radius of spring sphere
    hitRadius: float
    # Name of the Spring
    name: Optional[str] = None
    # Colliders that detect collision with nodes start from springRoot
    colliders: Optional[List[int]] = None
    # Dictionary object with extension-specific objects.
    extensions: Optional[Dict[str, Dict[str, Any]]] = None
    # Application-specific data.
    extras: Optional[Dict[str, Any]] = None

    def to_dict(self) -> Dict[str, Any]:
        d: Dict[str, Any] = {}
        if is_enable(self.name): d["name"] = self.name # noqa
        if is_enable(self.setting): d["setting"] = self.setting # noqa
        if is_enable(self.springRoot): d["springRoot"] = self.springRoot # noqa
        if is_enable(self.hitRadius): d["hitRadius"] = self.hitRadius # noqa
        if self.colliders: d["colliders"] = self.colliders # noqa
        if is_enable(self.extensions): d["extensions"] = self.extensions # noqa
        if is_enable(self.extras): d["extras"] = self.extras # noqa
        return d

    @staticmethod
    def from_dict(src: dict) -> 'Spring':
        dst = {}
        if "name" in src: dst["name"] = src["name"] # noqa copy
        if "setting" in src: dst["setting"] = src["setting"] # noqa copy
        if "springRoot" in src: dst["springRoot"] = src["springRoot"] # noqa copy
        if "hitRadius" in src: dst["hitRadius"] = src["hitRadius"] # noqa copy
        dst["colliders"] = src.get("colliders", [])
        dst["extensions"] = src.get("extensions", {})
        dst["extras"] = src.get("extras", {})
        return Spring(**dst)


class VRMCSpringBone(NamedTuple):
    # An array of settings.
    settings: Optional[List[SpringSetting]] = None
    # An array of springs.
    springs: Optional[List[Spring]] = None
    # Dictionary object with extension-specific objects.
    extensions: Optional[Dict[str, Dict[str, Any]]] = None
    # Application-specific data.
    extras: Optional[Dict[str, Any]] = None

    def to_dict(self) -> Dict[str, Any]:
        d: Dict[str, Any] = {}
        if self.settings: d["settings"] = [item.to_dict() for item in self.settings] # noqa
        if self.springs: d["springs"] = [item.to_dict() for item in self.springs] # noqa
        if is_enable(self.extensions): d["extensions"] = self.extensions # noqa
        if is_enable(self.extras): d["extras"] = self.extras # noqa
        return d

    @staticmethod
    def from_dict(src: dict) -> 'VRMCSpringBone':
        dst = {}
        dst["settings"] = [SpringSetting.from_dict(item) for item in src["settings"]] if "settings" in src else [] # noqa
        dst["springs"] = [Spring.from_dict(item) for item in src["springs"]] if "springs" in src else [] # noqa
        dst["extensions"] = src.get("extensions", {})
        dst["extras"] = src.get("extras", {})
        return VRMCSpringBone(**dst)


if __name__ == '__main__':
    pass
